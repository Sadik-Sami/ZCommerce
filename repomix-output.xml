This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
drizzle/
  meta/
    _journal.json
    0000_snapshot.json
  0000_pale_alex_wilder.sql
src/
  db/
    schema/
      productsSchema.ts
    index.ts
  routes/
    products/
      index.ts
      productController.ts
  index.ts
.gitignore
drizzle.config.ts
package.json
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="drizzle/meta/_journal.json">
{
  "version": "7",
  "dialect": "postgresql",
  "entries": [
    {
      "idx": 0,
      "version": "7",
      "when": 1757713278245,
      "tag": "0000_pale_alex_wilder",
      "breakpoints": true
    }
  ]
}
</file>

<file path="drizzle/meta/0000_snapshot.json">
{
  "id": "e0bf1bde-3522-48f9-b7f3-15bbb4e9824c",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.products": {
      "name": "products",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "always",
            "name": "products_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "2147483647",
            "cache": "1",
            "cycle": false
          }
        },
        "name": {
          "name": "name",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "image": {
          "name": "image",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "price": {
          "name": "price",
          "type": "double precision",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {},
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}
</file>

<file path="drizzle/0000_pale_alex_wilder.sql">
CREATE TABLE "products" (
	"id" integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY (sequence name "products_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"name" varchar(255) NOT NULL,
	"description" text,
	"image" varchar(255),
	"price" double precision NOT NULL
);
</file>

<file path="src/db/schema/productsSchema.ts">
import { doublePrecision, integer, pgTable, text, varchar } from 'drizzle-orm/pg-core';

export const productsTable = pgTable('products', {
	id: integer().primaryKey().generatedAlwaysAsIdentity(),
	name: varchar({ length: 255 }).notNull(),
	description: text(),
	image: varchar({ length: 255 }),
	price: doublePrecision().notNull(),
});
</file>

<file path="src/db/index.ts">
import { drizzle } from 'drizzle-orm/node-postgres';
import { Pool } from 'pg';
const pool = new Pool({
	connectionString: process.env.DATABASE_URL!,
});
export const db = drizzle({ client: pool });
</file>

<file path="src/routes/products/index.ts">
import { Router } from 'express';
import {
  listProducts,
  getProductById,
  createProduct,
  updateProduct,
  deleteProduct
} from './productController';

const router = Router();

router.get('/', listProducts);
router.get('/:id', getProductById);

router.post('/', createProduct);
router.put('/:id', updateProduct);
router.delete('/:id', deleteProduct);

export default router;
</file>

<file path="src/routes/products/productController.ts">
import { Request, Response } from 'express';
import { db } from '../../db/index';
import { productsTable } from '../../db/schema/productsSchema';

export function listProducts(req: Request, res: Response) {
	res.send('All products');
}
export function getProductById(req: Request, res: Response) {
	res.send('getProductById');
}
export async function createProduct(req: Request, res: Response) {
	try {
		const insertedProduct = await db
			.insert(productsTable)
			.values(req.body)
			.returning({ id: productsTable.id, name: productsTable.name });
		res.status(201).json({ message: 'Product added successfully', product: insertedProduct });
	} catch (error) {
		res.status(500).send(error);
	}
}
export function updateProduct(req: Request, res: Response) {
	res.send('updateProduct');
}
export function deleteProduct(req: Request, res: Response) {
	res.send('deleteProduct');
}
</file>

<file path="src/index.ts">
import express, { json, urlencoded } from 'express';
import productRoutes from './routes/products/index';
const port = 3000;
const app = express();

app.use(urlencoded({ extended: false }));
app.use(json());

app.get('/', (req, res) => {
	res.send('Hello World');
});

app.use('/products', productRoutes);

app.listen(port, () => {
	console.log(`Zcommerce is listening on port ${port}`);
});
</file>

<file path=".gitignore">
node_modules
dist
.env
</file>

<file path="drizzle.config.ts">
import { defineConfig } from 'drizzle-kit';

export default defineConfig({
	out: './drizzle',
	schema: ['./src/db/schema/productsSchema.ts'],
	dialect: 'postgresql',
	dbCredentials: {
		url: process.env.DATABASE_URL!,
	},
});
</file>

<file path="package.json">
{
	"name": "server",
	"version": "1.0.0",
	"description": "",
	"main": "index.js",
	"type": "module",
	"scripts": {
		"test": "echo \"Error: no test specified\" && exit 1",
		"dev": "node --import=tsx --env-file=.env --watch src/index.ts",
		"build": "tsc",
		"db:generate": "drizzle-kit generate",
		"db:migrate": "drizzle-kit migrate",
		"db:studio": "drizzle-kit studio"
	},
	"keywords": [],
	"author": "",
	"license": "ISC",
	"packageManager": "pnpm@10.15.1",
	"dependencies": {
		"dotenv": "^17.2.2",
		"drizzle-orm": "^0.44.5",
		"express": "^5.1.0",
		"pg": "^8.16.3"
	},
	"devDependencies": {
		"@types/express": "^5.0.3",
		"@types/pg": "^8.15.5",
		"drizzle-kit": "^0.31.4",
		"tsx": "^4.20.5",
		"typescript": "^5.9.2"
	}
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "module": "ESNext", // Use ESNext for ESM
    "target": "ES2020", // Target modern ECMAScript versions
    "moduleResolution": "node",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "outDir": "./dist", // Output directory for compiled files
    "strict": true, // Enable strict type-checking options
    "skipLibCheck": true, // Skip type checking of declaration files
    "resolveJsonModule": true, // Include JSON imports
    "forceConsistentCasingInFileNames": true,
    "noEmit": false, // Allow emitting output
    "isolatedModules": true, // Required for using ESM modules
    "baseUrl": ".", // Allow absolute imports relative to project root
    "paths": {
      "*": ["node_modules/*"]
    }
  }
}
</file>

</files>
